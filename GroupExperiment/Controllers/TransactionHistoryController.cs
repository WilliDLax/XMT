// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Foundation;
using GroupExperiment.Modules.Models;
using GroupExperiment.Modules.TableSources;
using GroupExperiment.Modules.Utils;
using Newtonsoft.Json;
using UIKit;

namespace GroupExperiment
{
	public partial class TransactionHistoryController : UIViewController
	{
        public List<GroupTransaction> transactions = new List<GroupTransaction>();
        public int index;

        HttpClient client;

		public TransactionHistoryController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            Title = "Transactions";

            NavigationController.NavigationBarHidden = false;
            NavigationItem.HidesBackButton = true;

            transactionTableView.Source = new TransactionTableSource(transactions, this);

            GetTransactions().Wait(200);
        }

        public async Task GetTransactions()
        {
            activityBackgroundView.Hidden = false;
            indicator.Hidden = false;
            indicator.StartAnimating();

            client = new HttpClient(MyUtils.GetInsecureHandler());

            string url = "https://localhost:5001/Transaction/get-transaction-groups/" + Commonclass.ActiveAccount.AccountNumber;
            string url2 = "https://xmtapi.azurewebsites.net/Transaction/get-transaction-groups/" + Commonclass.ActiveAccount.AccountNumber;

            HttpResponseMessage response = await client.GetAsync(url2);

            var responseContent = await response.Content.ReadAsStringAsync();

            indicator.StopAnimating();
            activityBackgroundView.Hidden = true;
            Console.WriteLine(responseContent);

            if (response.IsSuccessStatusCode)
            {
                GroupTransaction[] gottenTransactions = JsonConvert.DeserializeObject<GroupTransaction[]>(responseContent);

                foreach(GroupTransaction transaction in gottenTransactions)
                {
                    transactions.Add(transaction);
                }
                transactionTableView.ReloadData();
            }
            else
            {
                Console.WriteLine("something went wrong");
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if(segue.Identifier == "toTransactionDetail")
            {
                var detailPage = segue.DestinationViewController as TransactionDetailController;

                detailPage.transactionDetails = transactions[index].Transactions;
            }
        }
    }
}
