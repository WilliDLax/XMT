// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net.Http;
using System.Threading.Tasks;
using CoreGraphics;
using EventKit;
using Foundation;
using GroupExperiment.Modules;
using GroupExperiment.Modules.Utils;
using Newtonsoft.Json;
using Security;
using UIKit;

namespace GroupExperiment
{
	public partial class LoginController : UIViewController
	{
        //eye icons for password toggle
        UIImageView imageIcon = new UIImageView();

        //web service tools
        HttpClient client;
        //HttpClientHandler insecureHandler;  //because Toyin's API has a scam certificate

        //variables for segue
        public string userName;
        public string accType;
        public string accNumber;
        public double accBalance;

        public string newEmail;
        public string newPassword;


        public LoginController (IntPtr handle) : base (handle)
		{
            //insecureHandler = GetInsecureHandler();
            client = new HttpClient(MyUtils.GetInsecureHandler());
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            MyUtils.ResignResponders(View);

            MyUtils.AddTextFieldShadow(emailTextField);
            MyUtils.AddTextFieldShadow(passwordTextField);

            //set values from user defaults
            string mail = NSUserDefaults.StandardUserDefaults.StringForKey("Usermail");
            if (!string.IsNullOrEmpty(mail))
            {
                emailTextField.Text = mail;
            }
            string password = NSUserDefaults.StandardUserDefaults.StringForKey("UserPass");
            if (!string.IsNullOrEmpty(password))
            {
                passwordTextField.Text = password;
            }

            if (!string.IsNullOrEmpty(newEmail))
            {
                emailTextField.Text = newEmail;
            }
            if (!string.IsNullOrEmpty(newPassword))
            {
                passwordTextField.Text = newPassword;
            }

            loginBtn.TouchUpInside += LoginBtn_TouchUpInside;

            //just to toggle password view
            imageIcon.Image = UIImage.FromBundle("hide");

            UIView contentView = new UIView();
            contentView.AddSubview(imageIcon);

            contentView.Frame = new CGRect(0, 0, UIImage.FromBundle("hide").Size.Width, UIImage.FromBundle("hide").Size.Height);
            imageIcon.Frame = new CGRect(-10, 0, UIImage.FromBundle("hide").Size.Width, UIImage.FromBundle("hide").Size.Height);

            passwordTextField.RightView = contentView;
            passwordTextField.RightViewMode = UITextFieldViewMode.Always;

            contentView.UserInteractionEnabled = true;
            var tapRecognizer = new UITapGestureRecognizer(TogglePassword);
            contentView.AddGestureRecognizer(tapRecognizer);
        }

        public void TogglePassword(UITapGestureRecognizer tap)
        {
            if(imageIcon.Image == UIImage.FromBundle("show"))
            {
                imageIcon.Image = UIImage.FromBundle("hide");
                passwordTextField.SecureTextEntry = true;
            }
            else
            {
                imageIcon.Image = UIImage.FromBundle("show");
                passwordTextField.SecureTextEntry = false;
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if(segue.Identifier == "toDashboard")
            {
                var dashboard = segue.DestinationViewController as DashboardController;
                if(dashboard != null)
                {
                    dashboard.userName = userName;
                    dashboard.accBalance = accBalance;
                    dashboard.accType = accType;
                    dashboard.accNumber = accNumber;
                }
            }
        }

        private void LoginBtn_TouchUpInside(object sender, EventArgs e)
        {
            Verifcation();
        }

        public void Verifcation()
        {
            if (String.IsNullOrWhiteSpace(emailTextField.Text) || String.IsNullOrWhiteSpace(passwordTextField.Text))
            {
                MyUtils.ShowSimpleAlert("Empty Field", "Fields cannot be empty",this);
            }
            else
            {
                CheckUser().Wait(200);
            }
        }

        public async Task CheckUser()
        {
            activityBackgroundView.Hidden = false;
            indicator.Hidden = false;
            indicator.StartAnimating();

            UserLogin user = new UserLogin(emailTextField.Text,passwordTextField.Text);

            string url = "https://localhost:5001/Customers/login";
            string url2 = "https://xmtapi.azurewebsites.net/customers/login";

            //api call usng httpClient
            HttpResponseMessage response = await client.PostAsJsonAsync(url2, user);

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseContent);

            indicator.StopAnimating();
            activityBackgroundView.Hidden = true;

            if (response.IsSuccessStatusCode)
            {
                Customer customer = JsonConvert.DeserializeObject<Customer>(responseContent);

                //for later use
                Commonclass.ActiveAccount = customer;

                userName = customer.FirstName;
                accBalance = customer.AccountBalance;
                accType = customer.AccountType;
                accNumber = customer.AccountNumber;

                NSUserDefaults.StandardUserDefaults.SetString(emailTextField.Text, "Usermail");
                NSUserDefaults.StandardUserDefaults.SetString(passwordTextField.Text, "UserPass");

                PerformSegue("toDashboard", null);
            }
            else
            {
                MyUtils.ShowSimpleAlert("Sorry", "Ivalid Email or password!", this);
            }
        }
    }

    //DTO for user login
    public class UserLogin
    {
        public string Email { get; set; }
        public string Password { get; set; }

        public UserLogin(string email, string password)
        {
            Email = email;
            Password = password;
        }
    }
}
