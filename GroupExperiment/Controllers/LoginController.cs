// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net.Http;
using System.Threading.Tasks;
using CoreGraphics;
using EventKit;
using Foundation;
using GroupExperiment.Modules;
using Security;
using UIKit;

namespace GroupExperiment
{
	public partial class LoginController : UIViewController
	{
        //global variables
        UIImageView imageIcon = new UIImageView();
        MyAlerts alerter = new MyAlerts();

        //web service tools
        HttpClient client;
        HttpClientHandler insecureHandler;  //because Toyin's API has a scam certificate


        public LoginController (IntPtr handle) : base (handle)
		{
            insecureHandler = GetInsecureHandler();
            client = new HttpClient(insecureHandler);
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            string mail = NSUserDefaults.StandardUserDefaults.StringForKey("Usermail");
            emailTextField.Text = mail;

            loginBtn.TouchUpInside += LoginBtn_TouchUpInside;

            //just to toggle password view
            imageIcon.Image = UIImage.FromBundle("hide");

            UIView contentView = new UIView();
            contentView.AddSubview(imageIcon);

            contentView.Frame = new CGRect(0, 0, UIImage.FromBundle("hide").Size.Width, UIImage.FromBundle("hide").Size.Height);
            imageIcon.Frame = new CGRect(-10, 0, UIImage.FromBundle("hide").Size.Width, UIImage.FromBundle("hide").Size.Height);

            passwordTextField.RightView = contentView;
            passwordTextField.RightViewMode = UITextFieldViewMode.Always;

            contentView.UserInteractionEnabled = true;
            var tapRecognizer = new UITapGestureRecognizer(TogglePassword);
            contentView.AddGestureRecognizer(tapRecognizer);
        }

        public void TogglePassword(UITapGestureRecognizer tap)
        {
            if(imageIcon.Image == UIImage.FromBundle("show"))
            {
                imageIcon.Image = UIImage.FromBundle("hide");
                passwordTextField.SecureTextEntry = true;
            }
            else
            {
                imageIcon.Image = UIImage.FromBundle("show");
                passwordTextField.SecureTextEntry = false;
            }
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if(segue.Identifier == "toDashboard")
            {
                var dashboard = segue.DestinationViewController as DashboardController;
                if(dashboard != null)
                {
                    dashboard.userName = "Lax";
                }
            }
        }

        private void LoginBtn_TouchUpInside(object sender, EventArgs e)
        {
            Verifcation();
        }

        public void Verifcation()
        {
            if (String.IsNullOrWhiteSpace(emailTextField.Text) || String.IsNullOrWhiteSpace(passwordTextField.Text))
            {
                alerter.ShowSimpleAlert("Empty Field", "Fields cannot be empty",this);
            }
            else
            {
                CheckUser().Wait(200);
            }
        }

        public async Task CheckUser()
        {
            UserLogin user = new UserLogin(emailTextField.Text,passwordTextField.Text);

            string uri = "https://localhost:5001/Customers/login";
            HttpResponseMessage message = await client.PostAsJsonAsync(uri, user);

            var something = await message.Content.ReadAsStringAsync();
            Console.WriteLine(something);
            InvokeOnMainThread(() =>
            {
                if (message.IsSuccessStatusCode)
                {
                    NSUserDefaults.StandardUserDefaults.SetString(emailTextField.Text, "Usermail");
                    PerformSegue("toDashboard", null);
                }
                else
                {
                    alerter.ShowSimpleAlert("Abeg getat!", "Ivalid Email or password!", this);
                }
            }); 
        }

        public HttpClientHandler GetInsecureHandler()
        {
            HttpClientHandler handler = new HttpClientHandler();
            handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) =>
            {
                if (cert.Issuer.Equals("CN=localhost"))
                    return true;
                return errors == System.Net.Security.SslPolicyErrors.None;
            };
            return handler;
        }
    }

    public class UserLogin
    {
        public string Email { get; set; }
        public string Password { get; set; }

        public UserLogin(string email, string password)
        {
            Email = email;
            Password = password;
        }
    }
}
