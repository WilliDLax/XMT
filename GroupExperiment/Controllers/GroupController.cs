// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using EventKit;
using Foundation;
using GroupExperiment.Modules;
using UIKit;

namespace GroupExperiment
{
	public partial class GroupController : UIViewController
	{
        List<Recipient> recipients;
        public string groupName;
        MyAlerts alerter = new MyAlerts();
        string numOfRecipients;
        double totalAmount = 0;

        public GroupController (IntPtr handle) : base (handle)
		{
            recipients = new List<Recipient>();
            recipients.Add(new Recipient("GTB", "0023314245", 340.53));
            recipients.Add(new Recipient("First Bank", "2123341212", 2000.0));
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            UpdateRecipientCount();
            UpdateTotalAmount();

            Title = groupName;

            transferBtn.TouchUpInside += TransferBtn_TouchUpInside;

            addRecipientBtn.Clicked += AddRecipientBtn_Clicked;

            groupTableView.Source = new GroupTableSource(recipients);

        }

        private void AddRecipientBtn_Clicked(object sender, EventArgs e)
        {
            if(recipients.Count == 10)
            {
                alerter.ShowSimpleAlert("Group full", "You have reached recipients limit", this);
            }
            else
            {
                alerter.ShowAddRecipientAlert("New Recipient", "Enter details", this, (UIAlertAction obj) =>
                {
                    if (String.IsNullOrWhiteSpace(alerter.alertController.TextFields[0].Text) ||
                    String.IsNullOrWhiteSpace(alerter.alertController.TextFields[1].Text) ||
                    String.IsNullOrWhiteSpace(alerter.alertController.TextFields[2].Text))
                    {
                        alerter.ShowSimpleAlert("Empty fields", "Behave yourself", this);
                    }
                    else
                    {
                        AddToRecipients(alerter.alertController.TextFields[0].Text, alerter.alertController.TextFields[1].Text, alerter.alertController.TextFields[2].Text);
                    }
                });
            }
        }

        private void TransferBtn_TouchUpInside(object sender, EventArgs e)
        {
            numOfRecipients = "Recipients: " + recipients.Count;

            PerformSegue("toSummary", null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if (segue.Identifier == "toSummary")
            {
                var summaryPage = segue.DestinationViewController as SummaryController;
                if(summaryPage != null)
                {
                    summaryPage.groupName = groupName;
                    summaryPage.numOfRecipients = numOfRecipients;
                    summaryPage.totalAmount = totalAmount;
                }
            }
        }

        private void UpdateRecipientCount()
        {
            recipientCountLabel.Text = "Recipients: " + recipients.Count + "/10";
        }

        private void UpdateTotalAmount()
        {
            foreach (Recipient recipient in recipients)
            {
                totalAmount += recipient.AmountToRecieve;
            }

            totalAmountLabel.Text = "Total amount: â‚¦" + totalAmount.ToString("0.###");
        }

        private void AddToRecipients(string bank, string accnumber, string amount)
        {
            recipients.Add(new Recipient(bank, accnumber, double.Parse(amount)));
            UpdateRecipientCount();
            UpdateTotalAmount();
            groupTableView.ReloadData();
        }
    }
}
