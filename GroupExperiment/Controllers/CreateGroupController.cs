// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using GroupExperiment.Modules;
using GroupExperiment.Modules.Models;
using GroupExperiment.Modules.Utils;
using Newtonsoft.Json;
using UIKit;

namespace GroupExperiment
{
	public partial class CreateGroupController : UIViewController
	{
        //to send selected group in segue
        public int indexNumber;

        public CreateGroupController (IntPtr handle) : base (handle)
		{
		}

        //reload table of saved beneficiary groups anytime screen shows
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            //check if there are already groups
            if(Commonclass.BeneficiaryGroups.Count != 0)
            {
                groupsTable.Hidden = false;
                groupsTable.ReloadData();
            }
            indexNumber = Commonclass.BeneficiaryGroups.Count;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationController.NavigationBarHidden = false;
            Title = "Groups";

            groupsTable.Source = new GroupsTableSource(Commonclass.BeneficiaryGroups,this);

            createGroupBtn.TouchUpInside += CreateGroupBtn_TouchUpInside;

            addNewGroupBtn.Clicked += AddNewGroupBtn_Clicked;
        }

        private void AddNewGroupBtn_Clicked(object sender, EventArgs e)
        {
            CreateNewGroup();
        }

        private void CreateGroupBtn_TouchUpInside(object sender, EventArgs e)
        {
            CreateNewGroup();
        }

        //create a new beneficiary group and add to list of beneficiary groups
        public void CreateNewGroup()
        {
            MyUtils.ShowAlertWithTextField("Create new group", "Enter group name", this, (UIAlertAction obj) =>
            {
                if (String.IsNullOrWhiteSpace(MyUtils.alertController.TextFields[0].Text))
                {
                    MyUtils.ShowSimpleAlert("Sorry", "Group name cannot be empty", this);
                }
                else
                {
                    string groupName;
                    groupName = MyUtils.alertController.TextFields[0].Text;
                    Console.WriteLine(groupName);
                    Commonclass.BeneficiaryGroups.Add(new BeneficiaryGroup(groupName));

                    PerformSegue("toGroupController", null);
                }
            });
        }

        //send name of created group
        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if(segue.Identifier == "toGroupController")
            {
                var groupPage = segue.DestinationViewController as GroupController;
                if(groupPage != null)
                {
                    groupPage.indexNumber = indexNumber;
                }
            }
        }
    }
}
